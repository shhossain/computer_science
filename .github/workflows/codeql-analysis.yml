# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '40 22 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'cpp', 'csharp', 'go', 'java', 'javascript', 'ruby' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
    - name: cppcheck-action
      # You may pin to the exact commit or the version.
      # uses: deep5050/cppcheck-action@b4d7c69b911c24817691b4b210586568a858b4c5
      uses: deep5050/cppcheck-action@v3.0
      with:
        # GITHUB_TOKEN secret < automatically provided by Github , you don't need to set up >
        github_token: 
        # Show information messages when library files have info.
        check_library: # optional, default is disable
        # Print preprocessor output on stdout and don't do any further processing.
        skip_preprocessor: # optional, default is disable
        # Enable additional checks
        enable: # optional, default is all
        # Give a source file or source file directory to exclude from the check
        exclude_check: # optional, default is disable
        #  Allow that Cppcheck reports even though the analysis is inconclusive.
        inconclusive: # optional, default is enable
        # Enable inline suppressions
        inline_suppression: # optional, default is disable
        # Forces cppcheck to check all files as the given language
        force_language: # optional, default is disable
        # Force checking of all configurations in files
        force: # optional, default is disable
        # Max depth in whole program analysis
        max_ctu_depth: # optional, default is disable
        # Specifies platform specific types and sizes
        platform: # optional, default is disable
        # Set the C/C++ standard
        std: # optional, default is c++20
        # file where the result to be dumped
        output_file: # optional, default is cppcheck_report.txt
        # Branch that the badge will target. Defaults to the current branch.
        target_branch: # optional, default is 
        # Any other options you want to add, separate with a space, wrong options will cause a failure
        other_options: # optional, default is disable
        # Branch that the action will target on pull_request. Defaults to GITHUB_BASE_REF.
        pull_request_branch: # optional, default is 
        # Repository that the report will be pushed on. Defaults to the current repository.
        target_repository: # optional, default is 
        # Repository that the action will target on pull_request. Defaults to TARGET_REPOSITORY
        pull_request_repository: # optional, default is 
